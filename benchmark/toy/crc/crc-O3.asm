
crc32int.o:     file format elf32-bigmips


Disassembly of section .text:

00000000 <main>:
   //unsigned int Data[] = "1110000100000000110010101111111010101011101011011011101010111110000001000100001100100011101010110011010111111101000100100100000011010010000101000110100000010010010000010010010000010010000110111010000010111010101111100010000101001101111010101101101111101110111100100001010010000001001010011101100110011001000100100100101010011001100100010100110011001100100110010001001001000000000000010010010000000000";
   unsigned int CRC[8];
   int  i;
   unsigned int DoInvert;
   
   for (i=0; i<8; ++i)  CRC[i] = 0;                    // Init before calculation
   0:	3c020000 	lui	v0,0x0
   4:	24420000 	addiu	v0,v0,0

const unsigned int Data[] = {1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,1,0,1,0,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,0,1,1,0,0,1,1,0,1,0,1,1,1,1,1,1,1,0,1,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,1,1,0,1,0,0,1,0,0,0,0,1,0,1,0,0,0,1,1,0,1,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,1,1,0,1,1,1,0,1,0,0,0,0,0,1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,0,0,0,1,0,0,0,0,1,0,1,0,0,1,1,0,1,1,1,1,0,1,0,1,0,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,1,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,0,0,1,0,0,1,0,0,1,0,1,0,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,0,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,1,1,0,0,1,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0};

  
  
int main() {
   8:	27bdffc0 	addiu	sp,sp,-64
   //unsigned int Data[] = "1110000100000000110010101111111010101011101011011011101010111110000001000100001100100011101010110011010111111101000100100100000011010010000101000110100000010010010000010010010000010010000110111010000010111010101111100010000101001101111010101101101111101110111100100001010010000001001010011101100110011001000100100100101010011001100100010100110011001100100110010001001001000000000000010010010000000000";
   unsigned int CRC[8];
   int  i;
   unsigned int DoInvert;
   
   for (i=0; i<8; ++i)  CRC[i] = 0;                    // Init before calculation
   c:	00003021 	addu	a2,zero,zero
  10:	00006021 	addu	t4,zero,zero
  14:	00002021 	addu	a0,zero,zero
  18:	00004021 	addu	t0,zero,zero
  1c:	00002821 	addu	a1,zero,zero
  20:	00005021 	addu	t2,zero,zero
  24:	00004821 	addu	t1,zero,zero

const unsigned int Data[] = {1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,1,0,1,0,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,0,1,1,0,0,1,1,0,1,0,1,1,1,1,1,1,1,0,1,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,1,1,0,1,0,0,1,0,0,0,0,1,0,1,0,0,0,1,1,0,1,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,1,1,0,1,1,1,0,1,0,0,0,0,0,1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,0,0,0,1,0,0,0,0,1,0,1,0,0,1,1,0,1,1,1,1,0,1,0,1,0,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,1,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,0,0,1,0,0,1,0,0,1,0,1,0,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,0,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,1,1,0,0,1,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0};

  
  
int main() {
  28:	244d0640 	addiu	t5,v0,1600
  2c:	08000012 	j	48 <main+0x48>
  30:	00003821 	addu	a3,zero,zero
   int  i;
   unsigned int DoInvert;
   
   for (i=0; i<8; ++i)  CRC[i] = 0;                    // Init before calculation

START_CCORE   
   for (i=0; i<400; ++i)
  34:	01402821 	addu	a1,t2,zero
  38:	01803021 	addu	a2,t4,zero
  3c:	01205021 	addu	t2,t1,zero
  40:	01606021 	addu	t4,t3,zero
  44:	00604821 	addu	t1,v1,zero
      {
      DoInvert = (Data[i]==1) ^ CRC[7];         // XOR required?
  48:	8c430000 	lw	v1,0(v0)

      CRC[7] = CRC[6];
      CRC[6] = CRC[5];
      CRC[5] = CRC[4] ^ DoInvert;
      CRC[4] = CRC[3] ^ DoInvert;
  4c:	24420004 	addiu	v0,v0,4
   
   for (i=0; i<8; ++i)  CRC[i] = 0;                    // Init before calculation
   
   for (i=0; i<400; ++i)
      {
      DoInvert = (Data[i]==1) ^ CRC[7];         // XOR required?
  50:	38630001 	xori	v1,v1,0x1
  54:	2c630001 	sltiu	v1,v1,1
  58:	00e31826 	xor	v1,a3,v1

      CRC[7] = CRC[6];
      CRC[6] = CRC[5];
      CRC[5] = CRC[4] ^ DoInvert;
  5c:	00645826 	xor	t3,v1,a0
      CRC[4] = CRC[3] ^ DoInvert;
  60:	00c03821 	addu	a3,a2,zero
  64:	00682026 	xor	a0,v1,t0
   int  i;
   unsigned int DoInvert;
   
   for (i=0; i<8; ++i)  CRC[i] = 0;                    // Init before calculation
   
   for (i=0; i<400; ++i)
  68:	144dfff2 	bne	v0,t5,34 <main+0x34>
  6c:	00a04021 	addu	t0,a1,zero
      }
     
	
   for (i=0; i<8; ++i) {
        Result[7-i] = CRC[i] ? '1' : '0'; // Convert binary to ASCII
  70:	24020031 	addiu	v0,zero,49
  74:	2d8c0001 	sltiu	t4,t4,1
   for (i=0; i<8; ++i) {
		// printf("%d", Result[i]-48);
		if(i==3 || i==4 || i==7)
			main_result += (Result[i]==1);
		else
			main_result += (Result[i]==0);
  78:	2cc60001 	sltiu	a2,a2,1
      }
     
END_CCORE	
	
	
   for (i=0; i<8; ++i) {
        Result[7-i] = CRC[i] ? '1' : '0'; // Convert binary to ASCII
  7c:	004c6023 	subu	t4,v0,t4
   for (i=0; i<8; ++i) {
		// printf("%d", Result[i]-48);
		if(i==3 || i==4 || i==7)
			main_result += (Result[i]==1);
		else
			main_result += (Result[i]==0);
  80:	00463023 	subu	a2,v0,a2
      }
     
	
	
   for (i=0; i<8; ++i) {
        Result[7-i] = CRC[i] ? '1' : '0'; // Convert binary to ASCII
  84:	2c840001 	sltiu	a0,a0,1
  88:	2d6b0001 	sltiu	t3,t3,1
  8c:	00442023 	subu	a0,v0,a0
  90:	004b5823 	subu	t3,v0,t3
  94:	2ca50001 	sltiu	a1,a1,1
   for (i=0; i<8; ++i) {
		// printf("%d", Result[i]-48);
		if(i==3 || i==4 || i==7)
			main_result += (Result[i]==1);
		else
			main_result += (Result[i]==0);
  98:	2cc60001 	sltiu	a2,a2,1
  9c:	2d8c0001 	sltiu	t4,t4,1
      }
     
	
	
   for (i=0; i<8; ++i) {
        Result[7-i] = CRC[i] ? '1' : '0'; // Convert binary to ASCII
  a0:	00452823 	subu	a1,v0,a1
   for (i=0; i<8; ++i) {
		// printf("%d", Result[i]-48);
		if(i==3 || i==4 || i==7)
			main_result += (Result[i]==1);
		else
			main_result += (Result[i]==0);
  a4:	00cc3021 	addu	a2,a2,t4
  a8:	2d6b0001 	sltiu	t3,t3,1
   // printf("CRC: ");
   
   for (i=0; i<8; ++i) {
		// printf("%d", Result[i]-48);
		if(i==3 || i==4 || i==7)
			main_result += (Result[i]==1);
  ac:	38840001 	xori	a0,a0,0x1
      }
     
	
	
   for (i=0; i<8; ++i) {
        Result[7-i] = CRC[i] ? '1' : '0'; // Convert binary to ASCII
  b0:	2d4a0001 	sltiu	t2,t2,1
   for (i=0; i<8; ++i) {
		// printf("%d", Result[i]-48);
		if(i==3 || i==4 || i==7)
			main_result += (Result[i]==1);
		else
			main_result += (Result[i]==0);
  b4:	00cb5821 	addu	t3,a2,t3
   // printf("CRC: ");
   
   for (i=0; i<8; ++i) {
		// printf("%d", Result[i]-48);
		if(i==3 || i==4 || i==7)
			main_result += (Result[i]==1);
  b8:	2c840001 	sltiu	a0,a0,1
  bc:	38a50001 	xori	a1,a1,0x1
      }
     
	
	
   for (i=0; i<8; ++i) {
        Result[7-i] = CRC[i] ? '1' : '0'; // Convert binary to ASCII
  c0:	004a5023 	subu	t2,v0,t2
  c4:	2c630001 	sltiu	v1,v1,1
  c8:	2d290001 	sltiu	t1,t1,1
   // printf("CRC: ");
   
   for (i=0; i<8; ++i) {
		// printf("%d", Result[i]-48);
		if(i==3 || i==4 || i==7)
			main_result += (Result[i]==1);
  cc:	01642021 	addu	a0,t3,a0
  d0:	2ca50001 	sltiu	a1,a1,1
      }
     
	
	
   for (i=0; i<8; ++i) {
        Result[7-i] = CRC[i] ? '1' : '0'; // Convert binary to ASCII
  d4:	00431823 	subu	v1,v0,v1
  d8:	00494823 	subu	t1,v0,t1
   for (i=0; i<8; ++i) {
		// printf("%d", Result[i]-48);
		if(i==3 || i==4 || i==7)
			main_result += (Result[i]==1);
		else
			main_result += (Result[i]==0);
  dc:	2d4a0001 	sltiu	t2,t2,1
   // printf("CRC: ");
   
   for (i=0; i<8; ++i) {
		// printf("%d", Result[i]-48);
		if(i==3 || i==4 || i==7)
			main_result += (Result[i]==1);
  e0:	00851021 	addu	v0,a0,a1
		else
			main_result += (Result[i]==0);
  e4:	004a5021 	addu	t2,v0,t2
  e8:	2d290001 	sltiu	t1,t1,1
   // printf("CRC: ");
   
   for (i=0; i<8; ++i) {
		// printf("%d", Result[i]-48);
		if(i==3 || i==4 || i==7)
			main_result += (Result[i]==1);
  ec:	38630001 	xori	v1,v1,0x1
		else
			main_result += (Result[i]==0);
  f0:	01494821 	addu	t1,t2,t1
   // printf("CRC: ");
   
   for (i=0; i<8; ++i) {
		// printf("%d", Result[i]-48);
		if(i==3 || i==4 || i==7)
			main_result += (Result[i]==1);
  f4:	2c620001 	sltiu	v0,v1,1
			main_result += (Result[i]==0);
   }
    
   return main_result;

}    
  f8:	00491021 	addu	v0,v0,t1
  fc:	03e00008 	jr	ra
 100:	27bd0040 	addiu	sp,sp,64

Disassembly of section .rodata:

00000000 <Data>:
   0:	00000001 	0x1
   4:	00000001 	0x1
   8:	00000001 	0x1
	...
  1c:	00000001 	0x1
	...
  40:	00000001 	0x1
  44:	00000001 	0x1
	...
  50:	00000001 	0x1
  54:	00000000 	sll	zero,zero,0x0
  58:	00000001 	0x1
  5c:	00000000 	sll	zero,zero,0x0
  60:	00000001 	0x1
  64:	00000001 	0x1
  68:	00000001 	0x1
  6c:	00000001 	0x1
  70:	00000001 	0x1
  74:	00000001 	0x1
  78:	00000001 	0x1
  7c:	00000000 	sll	zero,zero,0x0
  80:	00000001 	0x1
  84:	00000000 	sll	zero,zero,0x0
  88:	00000001 	0x1
  8c:	00000000 	sll	zero,zero,0x0
  90:	00000001 	0x1
  94:	00000000 	sll	zero,zero,0x0
  98:	00000001 	0x1
  9c:	00000001 	0x1
  a0:	00000001 	0x1
  a4:	00000000 	sll	zero,zero,0x0
  a8:	00000001 	0x1
  ac:	00000000 	sll	zero,zero,0x0
  b0:	00000001 	0x1
  b4:	00000001 	0x1
  b8:	00000000 	sll	zero,zero,0x0
  bc:	00000001 	0x1
  c0:	00000001 	0x1
  c4:	00000000 	sll	zero,zero,0x0
  c8:	00000001 	0x1
  cc:	00000001 	0x1
  d0:	00000001 	0x1
  d4:	00000000 	sll	zero,zero,0x0
  d8:	00000001 	0x1
  dc:	00000000 	sll	zero,zero,0x0
  e0:	00000001 	0x1
  e4:	00000000 	sll	zero,zero,0x0
  e8:	00000001 	0x1
  ec:	00000001 	0x1
  f0:	00000001 	0x1
  f4:	00000001 	0x1
  f8:	00000001 	0x1
	...
 114:	00000001 	0x1
	...
 124:	00000001 	0x1
	...
 138:	00000001 	0x1
 13c:	00000001 	0x1
	...
 148:	00000001 	0x1
	...
 158:	00000001 	0x1
 15c:	00000001 	0x1
 160:	00000001 	0x1
 164:	00000000 	sll	zero,zero,0x0
 168:	00000001 	0x1
 16c:	00000000 	sll	zero,zero,0x0
 170:	00000001 	0x1
 174:	00000000 	sll	zero,zero,0x0
 178:	00000001 	0x1
 17c:	00000001 	0x1
	...
 188:	00000001 	0x1
 18c:	00000001 	0x1
 190:	00000000 	sll	zero,zero,0x0
 194:	00000001 	0x1
 198:	00000000 	sll	zero,zero,0x0
 19c:	00000001 	0x1
 1a0:	00000001 	0x1
 1a4:	00000001 	0x1
 1a8:	00000001 	0x1
 1ac:	00000001 	0x1
 1b0:	00000001 	0x1
 1b4:	00000001 	0x1
 1b8:	00000000 	sll	zero,zero,0x0
 1bc:	00000001 	0x1
	...
 1cc:	00000001 	0x1
	...
 1d8:	00000001 	0x1
	...
 1e4:	00000001 	0x1
	...
 200:	00000001 	0x1
 204:	00000001 	0x1
 208:	00000000 	sll	zero,zero,0x0
 20c:	00000001 	0x1
	...
 218:	00000001 	0x1
	...
 22c:	00000001 	0x1
 230:	00000000 	sll	zero,zero,0x0
 234:	00000001 	0x1
	...
 244:	00000001 	0x1
 248:	00000001 	0x1
 24c:	00000000 	sll	zero,zero,0x0
 250:	00000001 	0x1
	...
 26c:	00000001 	0x1
	...
 278:	00000001 	0x1
	...
 284:	00000001 	0x1
	...
 29c:	00000001 	0x1
	...
 2a8:	00000001 	0x1
	...
 2b4:	00000001 	0x1
	...
 2cc:	00000001 	0x1
	...
 2d8:	00000001 	0x1
	...
 2ec:	00000001 	0x1
 2f0:	00000001 	0x1
 2f4:	00000000 	sll	zero,zero,0x0
 2f8:	00000001 	0x1
 2fc:	00000001 	0x1
 300:	00000001 	0x1
 304:	00000000 	sll	zero,zero,0x0
 308:	00000001 	0x1
	...
 320:	00000001 	0x1
 324:	00000000 	sll	zero,zero,0x0
 328:	00000001 	0x1
 32c:	00000001 	0x1
 330:	00000001 	0x1
 334:	00000000 	sll	zero,zero,0x0
 338:	00000001 	0x1
 33c:	00000000 	sll	zero,zero,0x0
 340:	00000001 	0x1
 344:	00000000 	sll	zero,zero,0x0
 348:	00000001 	0x1
 34c:	00000001 	0x1
 350:	00000001 	0x1
 354:	00000001 	0x1
 358:	00000001 	0x1
	...
 368:	00000001 	0x1
	...
 37c:	00000001 	0x1
 380:	00000000 	sll	zero,zero,0x0
 384:	00000001 	0x1
	...
 390:	00000001 	0x1
 394:	00000001 	0x1
 398:	00000000 	sll	zero,zero,0x0
 39c:	00000001 	0x1
 3a0:	00000001 	0x1
 3a4:	00000001 	0x1
 3a8:	00000001 	0x1
 3ac:	00000000 	sll	zero,zero,0x0
 3b0:	00000001 	0x1
 3b4:	00000000 	sll	zero,zero,0x0
 3b8:	00000001 	0x1
 3bc:	00000000 	sll	zero,zero,0x0
 3c0:	00000001 	0x1
 3c4:	00000001 	0x1
 3c8:	00000000 	sll	zero,zero,0x0
 3cc:	00000001 	0x1
 3d0:	00000001 	0x1
 3d4:	00000000 	sll	zero,zero,0x0
 3d8:	00000001 	0x1
 3dc:	00000001 	0x1
 3e0:	00000001 	0x1
 3e4:	00000001 	0x1
 3e8:	00000001 	0x1
 3ec:	00000000 	sll	zero,zero,0x0
 3f0:	00000001 	0x1
 3f4:	00000001 	0x1
 3f8:	00000001 	0x1
 3fc:	00000000 	sll	zero,zero,0x0
 400:	00000001 	0x1
 404:	00000001 	0x1
 408:	00000001 	0x1
 40c:	00000001 	0x1
	...
 418:	00000001 	0x1
	...
 42c:	00000001 	0x1
 430:	00000000 	sll	zero,zero,0x0
 434:	00000001 	0x1
	...
 440:	00000001 	0x1
	...
 45c:	00000001 	0x1
	...
 468:	00000001 	0x1
 46c:	00000000 	sll	zero,zero,0x0
 470:	00000001 	0x1
	...
 47c:	00000001 	0x1
 480:	00000001 	0x1
 484:	00000001 	0x1
 488:	00000000 	sll	zero,zero,0x0
 48c:	00000001 	0x1
 490:	00000001 	0x1
	...
 49c:	00000001 	0x1
 4a0:	00000001 	0x1
	...
 4ac:	00000001 	0x1
 4b0:	00000001 	0x1
	...
 4bc:	00000001 	0x1
	...
 4cc:	00000001 	0x1
	...
 4d8:	00000001 	0x1
	...
 4e4:	00000001 	0x1
	...
 4f0:	00000001 	0x1
 4f4:	00000000 	sll	zero,zero,0x0
 4f8:	00000001 	0x1
 4fc:	00000000 	sll	zero,zero,0x0
 500:	00000001 	0x1
	...
 50c:	00000001 	0x1
 510:	00000001 	0x1
	...
 51c:	00000001 	0x1
 520:	00000001 	0x1
	...
 52c:	00000001 	0x1
	...
 53c:	00000001 	0x1
 540:	00000000 	sll	zero,zero,0x0
 544:	00000001 	0x1
	...
 550:	00000001 	0x1
 554:	00000001 	0x1
	...
 560:	00000001 	0x1
 564:	00000001 	0x1
	...
 570:	00000001 	0x1
 574:	00000001 	0x1
	...
 580:	00000001 	0x1
	...
 58c:	00000001 	0x1
 590:	00000001 	0x1
	...
 59c:	00000001 	0x1
	...
 5ac:	00000001 	0x1
	...
 5b8:	00000001 	0x1
	...
 5c4:	00000001 	0x1
	...
 5fc:	00000001 	0x1
	...
 608:	00000001 	0x1
	...
 614:	00000001 	0x1
	...
