// ==========================================================================
// CRC Generation Unit - Linear Feedback Shift Register implementation
// (c) Kay Gorontzi, GHSi.de, distributed under the terms of LGPL
// ==========================================================================

#include <stdio.h>

int main() {
    int main_result;
   unsigned char Result[8];
   // Random silly message
   //0xE100CAFEABADBABE044323AB35FD1240D21468124124121BA0BABE214DEADBEEF2148129D999124A99914CCC991240012400 (400 Characters)
   unsigned char Data[] = "1110000100000000110010101111111010101011101011011011101010111110000001000100001100100011101010110011010111111101000100100100000011010010000101000110100000010010010000010010010000010010000110111010000010111010101111100010000101001101111010101101101111101110111100100001010010000001001010011101100110011001000100100100101010011001100100010100110011001100100110010001001001000000000000010010010000000000";
   unsigned char CRC[8];
   int  i;
   unsigned char DoInvert;
   
   for (i=0; i<8; ++i)  CRC[i] = 0;                    // Init before calculation
   
   for (i=0; i<strlen(Data); ++i)
      {
      DoInvert = ('1'==Data[i]) ^ CRC[7];         // XOR required?

      CRC[7] = CRC[6];
      CRC[6] = CRC[5];
      CRC[5] = CRC[4] ^ DoInvert;
      CRC[4] = CRC[3] ^ DoInvert;
      CRC[3] = CRC[2];
      CRC[2] = CRC[1];
      CRC[1] = CRC[0];
      CRC[0] = DoInvert;
      }
      
   for (i=0; i<8; ++i) {
        Result[7-i] = CRC[i] ? '1' : '0'; // Convert binary to ASCII
   }
   Result[8] = 0;                                         // Set string terminator
                              
   printf("CRC: [%s]\n", Result);
    
    return main_result;

   }    

